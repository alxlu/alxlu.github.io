{"head":{"title":"Reselect Debugging","date":"2017-02","layout":"BlogPost","description":"Reselect Debugging Reselect is very useful if you use Redux in your app. However, debugging it is sometimes difficult (at least as of this…"},"body":"<h2 id=\"reselect-debugging\"><a href=\"#reselect-debugging\" class=\"phenomic-HeadingAnchor\">#</a>Reselect Debugging</h2>\n<p><a href=\"https://github.com/reactjs/reselect\">Reselect</a> is very useful if you use Redux in your app.\nHowever, debugging it is sometimes difficult (at least as of this blog post). This problem, is often\neasily solved through the use of unit testing your selectors. That being said, sometimes you want to\nmake a quick change to try something out without having to go back and fix on your tests before\ndeciding if it’s the way you want to go. Redux itself has a very nice way to visualize the state\nusing the redux dev tools. We can load up the dev tools while in development mode.</p>\n<p>To prevent excessive <code>console.log()</code>ing, I thought that it would be useful to be able to see how the\nselectors looked using the <a href=\"https://github.com/gaearon/redux-devtools\">Redux DevTools</a>. So, I\nessentially decided to create a new reducer that only loads during development mode that will show\nus how the selectors look after each state update.</p>\n<p>To do this, we load our reducer asynchronously if we are in development mode. Each of its members\nwill be each one of the selectors that we want to check on. Using webpack, we can inject an\nenvironment variable into our bundle that lets us determine what mode we are in.</p>\n<p><code>webpack.config.babel.js</code></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-comment\">// imports section</span>\n<span class=\"hljs-keyword\">import</span> webpack <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'webpack'</span>;\n\n<span class=\"hljs-comment\">// inside your plugins section</span>\n<span class=\"hljs-keyword\">new</span> webpack.DefinePlugin({\n    <span class=\"hljs-string\">'process.env.NODE_ENV'</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(process.env.NODE_ENV || <span class=\"hljs-string\">'development'</span>)\n}),</code></pre>\n<p>We want to update the reducer every time the state changes. This will be different for you depending\non how your project is set up. For my project, I am using something\n<a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a> to handle side effects and it happens to suit\nthis purpose well.</p>\n<p>So to update the reducer, we simply create a new saga and import all of my selectors that we want to\nadd to the dev tools, and then export a generator function that listens for every single action that\nfires. It will then pass the updated state into each of our selectors which will then update our\nasynchronous reducer.</p>\n<p><code>DevTools/reducer.js</code></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">import</span> { UPDATE_SELECTORS_SUCCESS } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./constants'</span>;\n\n<span class=\"hljs-keyword\">const</span> initialState = {\n  <span class=\"hljs-attr\">selectors</span>: {},\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">state = initialState, action</span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (action.type) {\n    <span class=\"hljs-keyword\">case</span> UPDATE_SELECTORS_SUCCESS:\n      <span class=\"hljs-keyword\">return</span> { ...state, <span class=\"hljs-attr\">selectors</span>: action.payload };\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">return</span> state;\n  }\n}</code></pre>\n<p><code>DevTools/actions.js</code></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">import</span> { UPDATE_SELECTORS_SUCCESS } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./constants'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> updateSelectors = <span class=\"hljs-function\">(<span class=\"hljs-params\">payload</span>) =></span> ({ <span class=\"hljs-attr\">type</span>: UPDATE_SELECTORS_SUCCESS, payload });</code></pre>\n<p><code>DevTools/saga.js</code></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-keyword\">import</span> { put, take, select } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'redux-saga/effects'</span>;\n<span class=\"hljs-keyword\">import</span> { createSelector } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'reselect'</span>;\n<span class=\"hljs-keyword\">import</span> { updateSelectors } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./actions'</span>;\n\n<span class=\"hljs-keyword\">import</span> chartDataSelector <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'chartDataSelector'</span>;\n<span class=\"hljs-keyword\">import</span> dashboardSelector <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'dashboardSelector'</span>;\n<span class=\"hljs-keyword\">import</span> metricNameSelector <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'metricNameSelector'</span>;\n<span class=\"hljs-keyword\">import</span> userSelector <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'userSelector'</span>;\n<span class=\"hljs-keyword\">import</span> predictionSelector <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'predictionSelector'</span>;\n\n<span class=\"hljs-keyword\">const</span> selectors = [\n  chartDataSelector,\n  dashboardSelector,\n  metricNameSelector,\n  userSelector,\n  predictionSelector,\n].map(<span class=\"hljs-function\"><span class=\"hljs-params\">selector</span> =></span> ({ <span class=\"hljs-attr\">name</span>: selector.name, <span class=\"hljs-attr\">selector</span>: selector() }));\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">updateSelectorSaga</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">yield</span> take(<span class=\"hljs-string\">'*'</span>);\n      <span class=\"hljs-keyword\">const</span> selectorsState = <span class=\"hljs-keyword\">yield</span> select(createSelector(\n        selectors.map(<span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =></span> s.selector),\n        (...results) => results.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">o, result, idx</span>) =></span> ({\n          ...o, [selectors[idx].name]: result,\n        }), {})\n      ));\n      <span class=\"hljs-keyword\">yield</span> put(updateSelectors(selectorsState));\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n      <span class=\"hljs-built_in\">console</span>.log(err);\n      <span class=\"hljs-comment\">// here we simply log any errors, although you could also consider putting the error into</span>\n      <span class=\"hljs-comment\">// the state.</span>\n    }\n  }\n}</code></pre>\n<p>We can use <code>import()</code> (or <code>System.import()</code> if you're on an older version of webpack) to load our\nreducer and saga. This not only loads them asynchronously, but will cause webpack to <a href=\"https://webpack.js.org/guides/code-splitting-import/\">split the\ncode</a> into a separate bundle so it doesn't\nincrease the size of your production build.</p>\n<p><code>index.js</code></p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"hljs-comment\">// with async/await and import()</span>\n<span class=\"hljs-keyword\">const</span> loadDevHelpers = <span class=\"hljs-keyword\">async</span> () => {\n  <span class=\"hljs-keyword\">const</span> [devSagas, devReducer] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'DevTools/saga'</span>),\n    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'DevTools/reducer'</span>),\n  ]);\n  injectAsyncReducer(store, <span class=\"hljs-string\">'debug'</span>, devReducer.default);\n  sagaMiddleware.run(devSagas.default);\n};\n\n<span class=\"hljs-comment\">// or if you want to use Promises and System.import()</span>\n<span class=\"hljs-keyword\">const</span> loadDevHelpers = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {\n  <span class=\"hljs-built_in\">Promise</span>.all([\n    System.import(<span class=\"hljs-string\">'DevTools/saga'</span>),\n    System.import(<span class=\"hljs-string\">'DevTools/reducer'</span>),\n  ]).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">[devSagas, devReducer]</span>) =></span> {\n    injectAsyncReducer(store, <span class=\"hljs-string\">'debug'</span>, devReducer.default);\n    sagaMiddleware.run(devSagas.default);\n  });\n};\n\n<span class=\"hljs-comment\">// using Promises and System.import() (for older versions of webpack)</span>\n\n<span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) {\n  loadDevHelpers();\n}</code></pre>\n<p>And that’s all we have to do to check on our selectors inside the redux dev tools. You’ll notice all\nof the selectors that you have imported will now show up.</p>\n<p><img src=\"/assets/devtools.png\" alt=\"Redux DevTools\"></p>\n","__filename":"blog/reselect.md","__url":"/blog/reselect/","__resourceUrl":"/blog/reselect/index.html","__dataUrl":"/blog/reselect/index.html.aff14aa00589affb35140bc730c519bc.json"}